// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod fermyon {
  pub mod spin {
    
    #[allow(clippy::all)]
    pub mod sqlite {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// A handle to an open sqlite instance
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Connection{
        handle: wit_bindgen::rt::Resource<Connection>,
      }
      
      impl Connection{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Connection{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "fermyon:spin/sqlite@2.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]connection"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      /// The set of errors which may be raised by functions in this interface
      #[derive(Clone)]
      pub enum Error{
        /// The host does not recognize the database name requested.
        NoSuchDatabase,
        /// The requesting component does not have access to the specified database (which may or may not exist).
        AccessDenied,
        /// The provided connection is not valid
        InvalidConnection,
        /// The database has reached its capacity
        DatabaseFull,
        /// Some implementation-specific error has occurred (e.g. I/O)
        Io(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for Error {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Error::NoSuchDatabase => {
              f.debug_tuple("Error::NoSuchDatabase").finish()
            }
            Error::AccessDenied => {
              f.debug_tuple("Error::AccessDenied").finish()
            }
            Error::InvalidConnection => {
              f.debug_tuple("Error::InvalidConnection").finish()
            }
            Error::DatabaseFull => {
              f.debug_tuple("Error::DatabaseFull").finish()
            }
            Error::Io(e) => {
              f.debug_tuple("Error::Io").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for Error {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for Error {}
      /// A single column's result from a database query
      #[derive(Clone)]
      pub enum Value{
        Integer(i64),
        Real(f64),
        Text(wit_bindgen::rt::string::String),
        Blob(wit_bindgen::rt::vec::Vec::<u8>),
        Null,
      }
      impl ::core::fmt::Debug for Value {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Value::Integer(e) => {
              f.debug_tuple("Value::Integer").field(e).finish()
            }
            Value::Real(e) => {
              f.debug_tuple("Value::Real").field(e).finish()
            }
            Value::Text(e) => {
              f.debug_tuple("Value::Text").field(e).finish()
            }
            Value::Blob(e) => {
              f.debug_tuple("Value::Blob").field(e).finish()
            }
            Value::Null => {
              f.debug_tuple("Value::Null").finish()
            }
          }
        }
      }
      /// A set of values for each of the columns in a query-result
      #[derive(Clone)]
      pub struct RowResult {
        pub values: wit_bindgen::rt::vec::Vec::<Value>,
      }
      impl ::core::fmt::Debug for RowResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("RowResult").field("values", &self.values).finish()
        }
      }
      /// A result of a query
      #[derive(Clone)]
      pub struct QueryResult {
        /// The names of the columns retrieved in the query
        pub columns: wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>,
        /// the row results each containing the values for all the columns for a given row
        pub rows: wit_bindgen::rt::vec::Vec::<RowResult>,
      }
      impl ::core::fmt::Debug for QueryResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("QueryResult").field("columns", &self.columns).field("rows", &self.rows).finish()
        }
      }
      impl Connection {
        #[allow(unused_unsafe, clippy::all)]
        /// Open a connection to a named database instance.
        /// 
        /// If `database` is "default", the default instance is opened.
        /// 
        /// `error::no-such-database` will be raised if the `name` is not recognized.
        pub fn open(database: &str,) -> Result<Connection,Error>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = database;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "fermyon:spin/sqlite@2.0.0")]
            extern "C" {
              #[link_name = "[static]connection.open"]
              fn wit_import(_: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import(ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = {
                  let l3 = *((ptr1 + 4) as *const i32);
                  
                  Connection::from_handle(l3 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*((ptr1 + 4) as *const u8));
                  let v8 = match l4 {
                    0 => {
                      Error::NoSuchDatabase
                    }
                    1 => {
                      Error::AccessDenied
                    }
                    2 => {
                      Error::InvalidConnection
                    }
                    3 => {
                      Error::DatabaseFull
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      let e8 = {
                        let l5 = *((ptr1 + 8) as *const i32);
                        let l6 = *((ptr1 + 12) as *const i32);
                        let len7 = l6 as usize;
                        let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                        
                        wit_bindgen::rt::string_lift(bytes7)
                      };
                      Error::Io(e8)
                    }
                  };
                  
                  v8
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Connection {
        #[allow(unused_unsafe, clippy::all)]
        /// Execute a statement returning back data if there is any
        pub fn execute(&self,statement: &str,parameters: &[Value],) -> Result<QueryResult,Error>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 20]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = statement;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec3 = parameters;
            let len3 = vec3.len() as i32;
            let layout3 = alloc::Layout::from_size_align_unchecked(vec3.len() * 16, 8);
            let result3 = if layout3.size() != 0
            {
              let ptr = alloc::alloc(layout3);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout3);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec3.into_iter().enumerate() {
              let base = result3 as i32 + (i as i32) * 16;
              {
                match e {
                  Value::Integer(e) => {
                    *((base + 0) as *mut u8) = (0i32) as u8;
                    *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                  },
                  Value::Real(e) => {
                    *((base + 0) as *mut u8) = (1i32) as u8;
                    *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                  },
                  Value::Text(e) => {
                    *((base + 0) as *mut u8) = (2i32) as u8;
                    let vec1 = e;
                    let ptr1 = vec1.as_ptr() as i32;
                    let len1 = vec1.len() as i32;
                    *((base + 12) as *mut i32) = len1;
                    *((base + 8) as *mut i32) = ptr1;
                  },
                  Value::Blob(e) => {
                    *((base + 0) as *mut u8) = (3i32) as u8;
                    let vec2 = e;
                    let ptr2 = vec2.as_ptr() as i32;
                    let len2 = vec2.len() as i32;
                    *((base + 12) as *mut i32) = len2;
                    *((base + 8) as *mut i32) = ptr2;
                  },
                  Value::Null=> {
                    {
                      *((base + 0) as *mut u8) = (4i32) as u8;
                    }
                  }
                }
              }
            }
            let ptr4 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "fermyon:spin/sqlite@2.0.0")]
            extern "C" {
              #[link_name = "[method]connection.execute"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0, len0, result3 as i32, len3, ptr4);
            let l5 = i32::from(*((ptr4 + 0) as *const u8));
            if layout3.size() != 0 {
              alloc::dealloc(result3, layout3);
            }
            match l5 {
              0 => {
                let e = {
                  let l6 = *((ptr4 + 4) as *const i32);
                  let l7 = *((ptr4 + 8) as *const i32);
                  let base11 = l6;
                  let len11 = l7;
                  let mut result11 = Vec::with_capacity(len11 as usize);
                  for i in 0..len11 {
                    let base = base11 + i * 8;
                    let e11 = {
                      let l8 = *((base + 0) as *const i32);
                      let l9 = *((base + 4) as *const i32);
                      let len10 = l9 as usize;
                      let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                      
                      wit_bindgen::rt::string_lift(bytes10)
                    };
                    result11.push(e11);
                  }
                  wit_bindgen::rt::dealloc(base11, (len11 as usize) * 8, 4);
                  let l12 = *((ptr4 + 12) as *const i32);
                  let l13 = *((ptr4 + 16) as *const i32);
                  let base27 = l12;
                  let len27 = l13;
                  let mut result27 = Vec::with_capacity(len27 as usize);
                  for i in 0..len27 {
                    let base = base27 + i * 8;
                    let e27 = {
                      let l14 = *((base + 0) as *const i32);
                      let l15 = *((base + 4) as *const i32);
                      let base26 = l14;
                      let len26 = l15;
                      let mut result26 = Vec::with_capacity(len26 as usize);
                      for i in 0..len26 {
                        let base = base26 + i * 16;
                        let e26 = {
                          let l16 = i32::from(*((base + 0) as *const u8));
                          let v25 = match l16 {
                            0 => {
                              let e25 = {
                                let l17 = *((base + 8) as *const i64);
                                
                                l17
                              };
                              Value::Integer(e25)
                            }
                            1 => {
                              let e25 = {
                                let l18 = *((base + 8) as *const f64);
                                
                                l18
                              };
                              Value::Real(e25)
                            }
                            2 => {
                              let e25 = {
                                let l19 = *((base + 8) as *const i32);
                                let l20 = *((base + 12) as *const i32);
                                let len21 = l20 as usize;
                                let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                                
                                wit_bindgen::rt::string_lift(bytes21)
                              };
                              Value::Text(e25)
                            }
                            3 => {
                              let e25 = {
                                let l22 = *((base + 8) as *const i32);
                                let l23 = *((base + 12) as *const i32);
                                let len24 = l23 as usize;
                                
                                Vec::from_raw_parts(l22 as *mut _, len24, len24)
                              };
                              Value::Blob(e25)
                            }
                            n => {
                              debug_assert_eq!(n, 4, "invalid enum discriminant");
                              Value::Null
                            }
                          };
                          
                          v25
                        };
                        result26.push(e26);
                      }
                      wit_bindgen::rt::dealloc(base26, (len26 as usize) * 16, 8);
                      
                      RowResult{
                        values: result26,
                      }
                    };
                    result27.push(e27);
                  }
                  wit_bindgen::rt::dealloc(base27, (len27 as usize) * 8, 4);
                  
                  QueryResult{
                    columns: result11,
                    rows: result27,
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l28 = i32::from(*((ptr4 + 4) as *const u8));
                  let v32 = match l28 {
                    0 => {
                      Error::NoSuchDatabase
                    }
                    1 => {
                      Error::AccessDenied
                    }
                    2 => {
                      Error::InvalidConnection
                    }
                    3 => {
                      Error::DatabaseFull
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      let e32 = {
                        let l29 = *((ptr4 + 8) as *const i32);
                        let l30 = *((ptr4 + 12) as *const i32);
                        let len31 = l30 as usize;
                        let bytes31 = Vec::from_raw_parts(l29 as *mut _, len31, len31);
                        
                        wit_bindgen::rt::string_lift(bytes31)
                      };
                      Error::Io(e32)
                    }
                  };
                  
                  v32
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod fermyon {
    pub mod spin {
      
      #[allow(clippy::all)]
      pub mod sqlite {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        /// A handle to an open sqlite instance
        
        pub use super::super::super::super::super::Connection as Connection;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "fermyon:spin/sqlite@2.0.0#[dtor]connection"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<Connection>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for Connection{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]fermyon:spin/sqlite@2.0.0")]
              extern "C" {
                #[link_name = "[resource-new]connection"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]fermyon:spin/sqlite@2.0.0")]
              extern "C" {
                #[link_name = "[resource-rep]connection"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnConnection = wit_bindgen::rt::Resource<Connection>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for Connection{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]fermyon:spin/sqlite@2.0.0")]
              extern "C" {
                #[link_name = "[resource-drop]connection"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        /// The set of errors which may be raised by functions in this interface
        #[derive(Clone)]
        pub enum Error{
          /// The host does not recognize the database name requested.
          NoSuchDatabase,
          /// The requesting component does not have access to the specified database (which may or may not exist).
          AccessDenied,
          /// The provided connection is not valid
          InvalidConnection,
          /// The database has reached its capacity
          DatabaseFull,
          /// Some implementation-specific error has occurred (e.g. I/O)
          Io(wit_bindgen::rt::string::String),
        }
        impl ::core::fmt::Debug for Error {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              Error::NoSuchDatabase => {
                f.debug_tuple("Error::NoSuchDatabase").finish()
              }
              Error::AccessDenied => {
                f.debug_tuple("Error::AccessDenied").finish()
              }
              Error::InvalidConnection => {
                f.debug_tuple("Error::InvalidConnection").finish()
              }
              Error::DatabaseFull => {
                f.debug_tuple("Error::DatabaseFull").finish()
              }
              Error::Io(e) => {
                f.debug_tuple("Error::Io").field(e).finish()
              }
            }
          }
        }
        impl ::core::fmt::Display for Error {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            write!(f, "{:?}", self)
          }
        }
        
        impl std::error::Error for Error {}
        /// A single column's result from a database query
        #[derive(Clone)]
        pub enum Value{
          Integer(i64),
          Real(f64),
          Text(wit_bindgen::rt::string::String),
          Blob(wit_bindgen::rt::vec::Vec::<u8>),
          Null,
        }
        impl ::core::fmt::Debug for Value {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              Value::Integer(e) => {
                f.debug_tuple("Value::Integer").field(e).finish()
              }
              Value::Real(e) => {
                f.debug_tuple("Value::Real").field(e).finish()
              }
              Value::Text(e) => {
                f.debug_tuple("Value::Text").field(e).finish()
              }
              Value::Blob(e) => {
                f.debug_tuple("Value::Blob").field(e).finish()
              }
              Value::Null => {
                f.debug_tuple("Value::Null").finish()
              }
            }
          }
        }
        /// A set of values for each of the columns in a query-result
        #[derive(Clone)]
        pub struct RowResult {
          pub values: wit_bindgen::rt::vec::Vec::<Value>,
        }
        impl ::core::fmt::Debug for RowResult {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("RowResult").field("values", &self.values).finish()
          }
        }
        /// A result of a query
        #[derive(Clone)]
        pub struct QueryResult {
          /// The names of the columns retrieved in the query
          pub columns: wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>,
          /// the row results each containing the values for all the columns for a given row
          pub rows: wit_bindgen::rt::vec::Vec::<RowResult>,
        }
        impl ::core::fmt::Debug for QueryResult {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("QueryResult").field("columns", &self.columns).field("rows", &self.rows).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "fermyon:spin/sqlite@2.0.0#[static]connection.open"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_static_connection_open(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_ConnectionImpl as GuestConnection>::open(wit_bindgen::rt::string_lift(bytes0));
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            match result1 {
              Ok(e) => { {
                *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                *((ptr2 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(e) as i32;
              } },
              Err(e) => { {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                match e {
                  Error::NoSuchDatabase=> {
                    {
                      *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                    }
                  }
                  Error::AccessDenied=> {
                    {
                      *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                    }
                  }
                  Error::InvalidConnection=> {
                    {
                      *((ptr2 + 4) as *mut u8) = (2i32) as u8;
                    }
                  }
                  Error::DatabaseFull=> {
                    {
                      *((ptr2 + 4) as *mut u8) = (3i32) as u8;
                    }
                  }
                  Error::Io(e) => {
                    *((ptr2 + 4) as *mut u8) = (4i32) as u8;
                    let vec3 = (e.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 12) as *mut i32) = len3;
                    *((ptr2 + 8) as *mut i32) = ptr3;
                  },
                }
              } },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_fermyon:spin/sqlite@2.0.0#[static]connection.open"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_static_connection_open(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => (),
                _ => {
                  let l1 = i32::from(*((arg0 + 4) as *const u8));
                  match l1 {
                    0 => (),
                    1 => (),
                    2 => (),
                    3 => (),
                    _ => {
                      let l2 = *((arg0 + 8) as *const i32);
                      let l3 = *((arg0 + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                    },
                  }
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "fermyon:spin/sqlite@2.0.0#[method]connection.execute"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_connection_execute(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg2 as usize;
            let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
            let base11 = arg3;
            let len11 = arg4;
            let mut result11 = Vec::with_capacity(len11 as usize);
            for i in 0..len11 {
              let base = base11 + i * 16;
              let e11 = {
                let l1 = i32::from(*((base + 0) as *const u8));
                let v10 = match l1 {
                  0 => {
                    let e10 = {
                      let l2 = *((base + 8) as *const i64);
                      
                      l2
                    };
                    Value::Integer(e10)
                  }
                  1 => {
                    let e10 = {
                      let l3 = *((base + 8) as *const f64);
                      
                      l3
                    };
                    Value::Real(e10)
                  }
                  2 => {
                    let e10 = {
                      let l4 = *((base + 8) as *const i32);
                      let l5 = *((base + 12) as *const i32);
                      let len6 = l5 as usize;
                      let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                      
                      wit_bindgen::rt::string_lift(bytes6)
                    };
                    Value::Text(e10)
                  }
                  3 => {
                    let e10 = {
                      let l7 = *((base + 8) as *const i32);
                      let l8 = *((base + 12) as *const i32);
                      let len9 = l8 as usize;
                      
                      Vec::from_raw_parts(l7 as *mut _, len9, len9)
                    };
                    Value::Blob(e10)
                  }
                  n => {
                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                    Value::Null
                  }
                };
                
                v10
              };
              result11.push(e11);
            }
            wit_bindgen::rt::dealloc(base11, (len11 as usize) * 16, 8);
            let result12 = <_ConnectionImpl as GuestConnection>::execute(wit_bindgen::rt::Resource::<Connection>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), result11);
            let ptr13 = _RET_AREA.0.as_mut_ptr() as i32;
            match result12 {
              Ok(e) => { {
                *((ptr13 + 0) as *mut u8) = (0i32) as u8;
                let QueryResult{ columns:columns14, rows:rows14, } = e;
                let vec16 = columns14;
                let len16 = vec16.len() as i32;
                let layout16 = alloc::Layout::from_size_align_unchecked(vec16.len() * 8, 4);
                let result16 = if layout16.size() != 0
                {
                  let ptr = alloc::alloc(layout16);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout16);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec16.into_iter().enumerate() {
                  let base = result16 as i32 + (i as i32) * 8;
                  {
                    let vec15 = (e.into_bytes()).into_boxed_slice();
                    let ptr15 = vec15.as_ptr() as i32;
                    let len15 = vec15.len() as i32;
                    ::core::mem::forget(vec15);
                    *((base + 4) as *mut i32) = len15;
                    *((base + 0) as *mut i32) = ptr15;
                  }
                }
                *((ptr13 + 8) as *mut i32) = len16;
                *((ptr13 + 4) as *mut i32) = result16 as i32;
                let vec21 = rows14;
                let len21 = vec21.len() as i32;
                let layout21 = alloc::Layout::from_size_align_unchecked(vec21.len() * 8, 4);
                let result21 = if layout21.size() != 0
                {
                  let ptr = alloc::alloc(layout21);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout21);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec21.into_iter().enumerate() {
                  let base = result21 as i32 + (i as i32) * 8;
                  {
                    let RowResult{ values:values17, } = e;
                    let vec20 = values17;
                    let len20 = vec20.len() as i32;
                    let layout20 = alloc::Layout::from_size_align_unchecked(vec20.len() * 16, 8);
                    let result20 = if layout20.size() != 0
                    {
                      let ptr = alloc::alloc(layout20);
                      if ptr.is_null()
                      {
                        alloc::handle_alloc_error(layout20);
                      }
                      ptr
                    }else {{
                      ::core::ptr::null_mut()
                    }};
                    for (i, e) in vec20.into_iter().enumerate() {
                      let base = result20 as i32 + (i as i32) * 16;
                      {
                        match e {
                          Value::Integer(e) => {
                            *((base + 0) as *mut u8) = (0i32) as u8;
                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                          },
                          Value::Real(e) => {
                            *((base + 0) as *mut u8) = (1i32) as u8;
                            *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                          },
                          Value::Text(e) => {
                            *((base + 0) as *mut u8) = (2i32) as u8;
                            let vec18 = (e.into_bytes()).into_boxed_slice();
                            let ptr18 = vec18.as_ptr() as i32;
                            let len18 = vec18.len() as i32;
                            ::core::mem::forget(vec18);
                            *((base + 12) as *mut i32) = len18;
                            *((base + 8) as *mut i32) = ptr18;
                          },
                          Value::Blob(e) => {
                            *((base + 0) as *mut u8) = (3i32) as u8;
                            let vec19 = (e).into_boxed_slice();
                            let ptr19 = vec19.as_ptr() as i32;
                            let len19 = vec19.len() as i32;
                            ::core::mem::forget(vec19);
                            *((base + 12) as *mut i32) = len19;
                            *((base + 8) as *mut i32) = ptr19;
                          },
                          Value::Null=> {
                            {
                              *((base + 0) as *mut u8) = (4i32) as u8;
                            }
                          }
                        }
                      }
                    }
                    *((base + 4) as *mut i32) = len20;
                    *((base + 0) as *mut i32) = result20 as i32;
                  }
                }
                *((ptr13 + 16) as *mut i32) = len21;
                *((ptr13 + 12) as *mut i32) = result21 as i32;
              } },
              Err(e) => { {
                *((ptr13 + 0) as *mut u8) = (1i32) as u8;
                match e {
                  Error::NoSuchDatabase=> {
                    {
                      *((ptr13 + 4) as *mut u8) = (0i32) as u8;
                    }
                  }
                  Error::AccessDenied=> {
                    {
                      *((ptr13 + 4) as *mut u8) = (1i32) as u8;
                    }
                  }
                  Error::InvalidConnection=> {
                    {
                      *((ptr13 + 4) as *mut u8) = (2i32) as u8;
                    }
                  }
                  Error::DatabaseFull=> {
                    {
                      *((ptr13 + 4) as *mut u8) = (3i32) as u8;
                    }
                  }
                  Error::Io(e) => {
                    *((ptr13 + 4) as *mut u8) = (4i32) as u8;
                    let vec22 = (e.into_bytes()).into_boxed_slice();
                    let ptr22 = vec22.as_ptr() as i32;
                    let len22 = vec22.len() as i32;
                    ::core::mem::forget(vec22);
                    *((ptr13 + 12) as *mut i32) = len22;
                    *((ptr13 + 8) as *mut i32) = ptr22;
                  },
                }
              } },
            };ptr13
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_fermyon:spin/sqlite@2.0.0#[method]connection.execute"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_method_connection_execute(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  let base5 = l3;
                  let len5 = l4;
                  for i in 0..len5 {
                    let base = base5 + i *8;
                    {
                      let l1 = *((base + 0) as *const i32);
                      let l2 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base5, (len5 as usize) * 8, 4);
                  let l15 = *((arg0 + 12) as *const i32);
                  let l16 = *((arg0 + 16) as *const i32);
                  let base17 = l15;
                  let len17 = l16;
                  for i in 0..len17 {
                    let base = base17 + i *8;
                    {
                      let l12 = *((base + 0) as *const i32);
                      let l13 = *((base + 4) as *const i32);
                      let base14 = l12;
                      let len14 = l13;
                      for i in 0..len14 {
                        let base = base14 + i *16;
                        {
                          let l6 = i32::from(*((base + 0) as *const u8));
                          match l6 {
                            0 => (),
                            1 => (),
                            2 => {
                              let l7 = *((base + 8) as *const i32);
                              let l8 = *((base + 12) as *const i32);
                              wit_bindgen::rt::dealloc(l7, (l8) as usize, 1);
                            },
                            3 => {
                              let l9 = *((base + 8) as *const i32);
                              let l10 = *((base + 12) as *const i32);
                              let base11 = l9;
                              let len11 = l10;
                              wit_bindgen::rt::dealloc(base11, (len11 as usize) * 1, 1);
                            },
                            _ => (),
                          }
                        }
                      }
                      wit_bindgen::rt::dealloc(base14, (len14 as usize) * 16, 8);
                    }
                  }
                  wit_bindgen::rt::dealloc(base17, (len17 as usize) * 8, 4);
                },
                _ => {
                  let l18 = i32::from(*((arg0 + 4) as *const u8));
                  match l18 {
                    0 => (),
                    1 => (),
                    2 => (),
                    3 => (),
                    _ => {
                      let l19 = *((arg0 + 8) as *const i32);
                      let l20 = *((arg0 + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l19, (l20) as usize, 1);
                    },
                  }
                },
              }
            }
          };
        };
        use super::super::super::super::super::Connection as _ConnectionImpl;
        pub trait GuestConnection {
          /// Open a connection to a named database instance.
          /// 
          /// If `database` is "default", the default instance is opened.
          /// 
          /// `error::no-such-database` will be raised if the `name` is not recognized.
          fn open(database: wit_bindgen::rt::string::String,) -> Result<OwnConnection,Error>;
          /// Execute a statement returning back data if there is any
          fn execute(&self,statement: wit_bindgen::rt::string::String,parameters: wit_bindgen::rt::vec::Vec::<Value>,) -> Result<QueryResult,Error>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 20]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 20]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:proxy"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 946] = [3, 0, 5, 112, 114, 111, 120, 121, 0, 97, 115, 109, 13, 0, 1, 0, 7, 184, 6, 1, 65, 2, 1, 65, 4, 1, 66, 21, 4, 0, 10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 3, 1, 1, 113, 5, 16, 110, 111, 45, 115, 117, 99, 104, 45, 100, 97, 116, 97, 98, 97, 115, 101, 0, 0, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 0, 0, 18, 105, 110, 118, 97, 108, 105, 100, 45, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 0, 13, 100, 97, 116, 97, 98, 97, 115, 101, 45, 102, 117, 108, 108, 0, 0, 2, 105, 111, 1, 115, 0, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 1, 1, 112, 125, 1, 113, 5, 7, 105, 110, 116, 101, 103, 101, 114, 1, 120, 0, 4, 114, 101, 97, 108, 1, 117, 0, 4, 116, 101, 120, 116, 1, 115, 0, 4, 98, 108, 111, 98, 1, 3, 0, 4, 110, 117, 108, 108, 0, 0, 4, 0, 5, 118, 97, 108, 117, 101, 3, 0, 4, 1, 112, 5, 1, 114, 1, 6, 118, 97, 108, 117, 101, 115, 6, 4, 0, 10, 114, 111, 119, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 1, 112, 115, 1, 112, 8, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 9, 4, 114, 111, 119, 115, 10, 4, 0, 12, 113, 117, 101, 114, 121, 45, 114, 101, 115, 117, 108, 116, 3, 0, 11, 1, 105, 0, 1, 106, 1, 13, 1, 2, 1, 64, 1, 8, 100, 97, 116, 97, 98, 97, 115, 101, 115, 0, 14, 4, 0, 23, 91, 115, 116, 97, 116, 105, 99, 93, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 46, 111, 112, 101, 110, 1, 15, 1, 104, 0, 1, 106, 1, 12, 1, 2, 1, 64, 3, 4, 115, 101, 108, 102, 16, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 10, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 6, 0, 17, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 46, 101, 120, 101, 99, 117, 116, 101, 1, 18, 3, 1, 25, 102, 101, 114, 109, 121, 111, 110, 58, 115, 112, 105, 110, 47, 115, 113, 108, 105, 116, 101, 64, 50, 46, 48, 46, 48, 5, 0, 1, 66, 21, 4, 0, 10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 3, 1, 1, 113, 5, 16, 110, 111, 45, 115, 117, 99, 104, 45, 100, 97, 116, 97, 98, 97, 115, 101, 0, 0, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 0, 0, 18, 105, 110, 118, 97, 108, 105, 100, 45, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 0, 13, 100, 97, 116, 97, 98, 97, 115, 101, 45, 102, 117, 108, 108, 0, 0, 2, 105, 111, 1, 115, 0, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 1, 1, 112, 125, 1, 113, 5, 7, 105, 110, 116, 101, 103, 101, 114, 1, 120, 0, 4, 114, 101, 97, 108, 1, 117, 0, 4, 116, 101, 120, 116, 1, 115, 0, 4, 98, 108, 111, 98, 1, 3, 0, 4, 110, 117, 108, 108, 0, 0, 4, 0, 5, 118, 97, 108, 117, 101, 3, 0, 4, 1, 112, 5, 1, 114, 1, 6, 118, 97, 108, 117, 101, 115, 6, 4, 0, 10, 114, 111, 119, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 1, 112, 115, 1, 112, 8, 1, 114, 2, 7, 99, 111, 108, 117, 109, 110, 115, 9, 4, 114, 111, 119, 115, 10, 4, 0, 12, 113, 117, 101, 114, 121, 45, 114, 101, 115, 117, 108, 116, 3, 0, 11, 1, 105, 0, 1, 106, 1, 13, 1, 2, 1, 64, 1, 8, 100, 97, 116, 97, 98, 97, 115, 101, 115, 0, 14, 4, 0, 23, 91, 115, 116, 97, 116, 105, 99, 93, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 46, 111, 112, 101, 110, 1, 15, 1, 104, 0, 1, 106, 1, 12, 1, 2, 1, 64, 3, 4, 115, 101, 108, 102, 16, 9, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 10, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 6, 0, 17, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 46, 101, 120, 101, 99, 117, 116, 101, 1, 18, 4, 1, 25, 102, 101, 114, 109, 121, 111, 110, 58, 115, 112, 105, 110, 47, 115, 113, 108, 105, 116, 101, 64, 50, 46, 48, 46, 48, 5, 1, 4, 1, 19, 102, 101, 114, 109, 121, 111, 110, 58, 112, 114, 111, 120, 121, 47, 112, 114, 111, 120, 121, 4, 0, 11, 11, 1, 0, 5, 112, 114, 111, 120, 121, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
